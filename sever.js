// node js: m√¥i tr∆∞·ªùng ƒë·ªÉ ch·∫°y code javascript tr√™n m√°y t√≠nh

import express from "express";
import { DataTypes, Sequelize } from "sequelize";
import initModels from "./src/models/init-models.js";
import rootRouter from "./src/routes/root.router.js";
import { responseError } from "./src/common/helper/responseSuccess.helper.js";
import { handleError } from "./src/common/helper/error.helper.js";
import cors from "cors";
import { createServer } from "http";
import { Server } from "socket.io";
import prisma from "./src/common/prisma/init.prisma.js";

const app = express();

// Middlewere gi√∫p ph√¢n gi·∫£i d·ªØ li·ªáu t·ª´ json sang ƒë·ªëi t∆∞·ª£ng javascript
app.use(express.json());

app.use(cors({ origin: ["http://localhost:5173", "google.com"] }));

app.use(rootRouter);

app.use(handleError);

const httpServer = createServer(app);
const io = new Server(httpServer, {
  /* options */
});

io.on("connection", (socket) => {
  console.log(`id: ${socket.id}`);

  socket.on("join-room", (data) => {
    console.log("üì¢ [sever.js:34]", data);
    const { user_id_sender, user_id_recipient } = data;
    // t·∫°o roomID: s·∫Øp x·∫øp 2 id l·∫°i v·ªõi nhau
    const roomId = [user_id_sender, user_id_recipient]
      .sort((a, b) => a - b)
      .join("_");

    // ƒê·∫£m b·∫£o tho√°t h·∫øt room tr∆∞·ªõc khi join room
    socket.rooms.forEach((roomId) => {
      socket.leave(roomId);
    });
    socket.join(roomId);
  });

  socket.on("send-message", async (data) => {
    console.log({ data });
    const { message, user_id_sender, user_id_recipient } = data;
    const roomId = [user_id_sender, user_id_recipient]
      .sort((a, b) => a - b)
      .join("_");
    io.to(roomId).emit("receive-message", data);
    await prisma.chats.create({
      data: {
        message: message,
        user_id_sender: user_id_sender,
        user_id_recipient: user_id_recipient,
      },
    });
  });

  // N·∫øn l·∫•y danh s√°ch message kh·ªüi t·∫°o ban ƒë·∫ßu b·∫±ng API
  // Kh√¥ng n√™n d√πng b·∫±ng socket nh∆∞ ph√≠a d∆∞·ªõi
  socket.on("get-list-message", async (data) => {
    console.log("get-list-message", { data });
    const { user_id_sender, user_id_recipient } = data;
    const chats = await prisma.chats.findMany({
      where: {
        OR: [
          // L·∫•y tin nh·∫Øn c·ªßa m√¨nh
          {
            user_id_recipient: user_id_recipient,
            user_id_sender: user_id_sender,
          },
          // L·∫•y tin nh·∫Øn c·ªßa ƒë·ªëi ph∆∞∆°ng
          {
            user_id_sender: user_id_sender,
            user_id_recipient: user_id_recipient,
          },
        ],
      },
    });
    socket.emit("get-list-message", chats);
  });
});

// app.use(
//   (req, res, next) => {
//     console.log("Middlewere 1");
//     const payload = "payload";
//     res.payload = payload;
//     next(123);
//   },
//   (req, res, next) => {
//     console.log("Middlewere 2");
//     console.log(res.payload);
//     next();
//   },
//   (req, res, next) => {
//     console.log("Middlewere 3");
//     next();
//   }
// );

// const sequelize = new Sequelize("postgres://user:pass@example.com:5432/dbname"); // Example for postgres

// const sequelize = new Sequelize(
//   "mysql://root:1234@localhost:3307/db_cyber_media"
// );

// // Ki·∫øm tr·∫£ k·∫øt n·ªëi v·ªõi c∆° s·ªü d·ªØ li·ªáu
// sequelize
//   .authenticate()
//   .then((res) => {
//     console.log("th√†nh c√¥ng");
//   })
//   .catch((err) => {
//     "th·∫•t b·∫°i", err;
//   });

// Khi clg, ho·∫∑c ch·∫°y m√† g·∫∑p tr∆∞·ªùng h·ª£p tr·∫£ v·ªÅ Promise ho·∫∑c Pending th√¨ m√¨nh s·∫Ω c·∫ßn th√™m await tr∆∞·ªõc d·ªØ li·ªáu cho bi·∫øn ƒë√≥

// const cars = await sequelize.query(`SELECT * FROM cars`);
// console.log("üì¢[sever.js:85]: cars: ", cars);

// Khi d√πng async await, n·∫øu kh√¥ng bi·∫øt th√™m async ·ªü ƒë√¢u, t√¨m th√¨ arown function b·ªçc n√≥ g·∫ßn nh·∫•t v√† th√™m async
// app.get(`/cars`, async (request, response, next) => {
//   const cars = await sequelize.query(`SELECT * FROM cars`);
//   console.log("üì¢[sever.js:85]: cars: ", cars);
//   // tr·∫£ d·ªØ li·ªáu v·ªÅ
//   response.json(cars);
// });

/**
 * Code first
 * ƒêi t·ª´ code t·∫°o ra table
 *    t·∫°o table b·∫±ng code javascript
 */

// // T·∫°o ra Model t·ª´ define
// const Cars = sequelize.define(
//   "Cars",
//   {
//     car_id: {
//       type: DataTypes.INTEGER,
//       primaryKey: true,
//       autoIncrement: true,
//     },
//     name: {
//       type: DataTypes.STRING,
//     },
//     description: {
//       type: DataTypes.TEXT,
//     },
//     passengers: {
//       type: DataTypes.INTEGER,
//     },
//     max_speed: {
//       type: DataTypes.STRING,
//     },
//     gearbox_type: {
//       type: DataTypes.STRING,
//     },
//     fuel_type: {
//       type: DataTypes.STRING,
//     },
//     price_per_day: {
//       type: DataTypes.DOUBLE,
//     },
//     discount_percentage: {
//       type: DataTypes.INTEGER,
//       defaultValue: 0,
//     },
//     image_url: {
//       type: DataTypes.STRING,
//     },
//     created_at: {
//       type: DataTypes.DATE,
//     },
//     updated_at: {
//       type: DataTypes.DATE,
//     },
//   },
//   { tableName: "cars", timestamps: false }
// );

// // ƒê·ªìng b·ªô gi·ªØa code v√† table
// Cars.sync()

//   .then((result) => {
//     console.log("üì¢[sever.js:158]: Th√†nh C√¥ng: ", result);
//   })

//   .catch((err) => {
//     console.log("üì¢[sever.js:162]: Th·∫•t B·∫°i: ", err);
//   });

// app.get(`/cars`, async (request, response, next) => {
//   // const cars = await sequelize.query(`SELECT * FROM cars`);
//   const cars = await Cars.findAll({ raw: true });
//   console.log("üì¢[sever.js:163]: cars: ", cars);

//   // // tr·∫£ d·ªØ li·ªáu v·ªÅ
//   response.json(cars);
// });

/**
 * Database first
 * ƒêi t·ª´ c√¢u l·ªánh SQL ƒë·ªÉ t·∫°o ra table
 *    - t·∫°o table b·∫±ng c√¢u l·ªánh SQL
 *    - sequelize-auto
 *    - npm i sequelize-auto
 *
 *    - npx sequelize-auto -h localhost -d db_cyber_media -u root -x 1234 -p 3307  --dialect mysql -o src/models -a src/models/additional.json -l esm
 */

// const models = initModels(sequelize);
// app.get(`/videos-list`, async (request, response, next) => {
//   const videos = await models.videos.findAll({ raw: true });
//   // // tr·∫£ d·ªØ li·ªáu v·ªÅ
//   response.json(videos);
// });

// tham s·ªë: port: 8386 ~ th∆∞·ªùng s·∫Ω ƒë·ªÖ t·ª´ 3000 tr·ªü l√™n ~ ·ª©ng d·ª•ng n√†o c≈©ng c·∫ßn c√≥
// tham s·ªë: callbackfunction: ch·∫°y port

//------
// app.listen(8386, () => {
//   console.log(`Sever online at port 8386`);
// });
// Sau khi c√†i ƒë·∫∑t socket.io th√¨ s·∫Ω thay th·∫ø th√†nh http.listen
httpServer.listen(8386, () => {
  console.log(`Sever online at port 8386`);
});
//------
//------------ L∆ØU l·∫†I
/**
 * request: ~~ object ~~ L·∫•y data t·ª´ client
 * response: ~~ object ~~ Tr·∫£ data v·ªÅ client  --> T·∫°i sao l·∫°i l√† response.json ~~ d·ªØ li·ªáu g·ª≠i ƒëi qua l·∫°i gi·ªØa frontend v√† backend l√† json
 * next:
 */

// app.get("/", (request, response, next) => {
//   console.log("123");
//   response.json(`hello world`);
// });

// C√°ch 1
// /**
//  * Query Parameters
//  * Th∆∞·ªùng d√πng khi: ph√¢n trang, search, fillter
//  */

// app.get("/query", (request, response, next) => {
//   console.log(request.query);

//   const { email, password } = request.query;

//   console.log(email, password);

//   response.json("Query Parameters");
// });

// C√°ch 2
// /**
//  * Path Parameters
//  * Th∆∞·ªùng d√πng khi: Mu·ªën l·∫•y chi ti·∫øt (detail) c·ªßa m·ªôt user, product,...
//  */

// app.get("/path/:id", (request, response, next) => {
//   console.log(request.params);
//   response.json("Path Parameters");
// });

// C√°ch 3
// /**
//  * Headers
//  */

// app.get("/headers", (request, response, next) => {
//   console.log(request.headers);
//   response.json("Headers Parameters");
// });

// C√°ch 4
// /**
//  * Body ~~ Nh·ªõ chuy·ªÉn sang POST
//  * ƒê·ªÉ nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ body ph·∫£i c√≥
//  * app.use(express.json)
//  * ho·∫∑c l√†: d√πng th∆∞ vi·ªán parser
//  */

// app.post("/body", (request, response, next) => {
//   console.log(request.body);
//   response.json("Body Parameters");
// });

// -------------------------------------------------------------

/**
 * PRISMA
 *    - npm i prisma
 *    - npm i @prisma/client
 *
 *    - npx prisma init: kh·ªüi t·∫°o prisma
 *       - t·∫°o ra .env
 *       - t·∫°o ra prisma/schema.prisma
 *
 *   - N·∫øu thay ƒë·ªïi (c·∫≠p nh·∫≠t) th√¥ng tin ·ªü data base. Th√¨ s·∫Ω ch·∫°y l·∫°i 2 c√¢u n√†y
 *    - npx prisma db pull
 *    - npx prisma generate
 *
 * ** npm i dotenv ch·∫°y n√†y ƒë·ªÉ ƒë·ªçc file env.
 * ** npm i dotenv
 * ** import 'dotenv/config
 */

/**
 * 
 * D√≤ng code b√™n sprit c·ªßa postman
 * 
 * const response = pm.response.json()

if(response.status === "error") return

const accessToken = response.metaData.accessToken
const refreshToken = response.metaData.refreshToken

pm.globals.set("accessToken", accessToken);
pm.globals.set("refreshToken", refreshToken);
 */
